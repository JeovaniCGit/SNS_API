// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SNS.Data;

#nullable disable

namespace SNS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250130121931_UpdatedNavigationProperties")]
    partial class UpdatedNavigationProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SNS.Models.BaixaMedica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodoDeIncapacidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recomendacoes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoDeSetorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("tipoDeSetorId");

                    b.ToTable("BaixasMedicas");
                });

            modelBuilder.Entity("SNS.Models.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descri")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descri");

                    b.HasKey("Id")
                        .HasName("PK__Especial__3213E83FF9DC20A7");

                    b.ToTable("Especialidade", (string)null);
                });

            modelBuilder.Entity("SNS.Models.HistoricoLaboral", b =>
                {
                    b.Property<int>("Instituiçãoid")
                        .HasColumnType("int");

                    b.Property<int>("Medicoid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("datetime");

                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.HasKey("Instituiçãoid", "Medicoid")
                        .HasName("PK__Historic__6E11538B37C7ADFC");

                    b.HasIndex("Medicoid");

                    b.ToTable("Historico_Laboral", (string)null);
                });

            modelBuilder.Entity("SNS.Models.Instituição", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descri")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descri");

                    b.Property<int>("TipoDeSetorid")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Institui__3213E83FA39E834C");

                    b.HasIndex("TipoDeSetorid");

                    b.ToTable("Instituição", (string)null);
                });

            modelBuilder.Entity("SNS.Models.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Especialidadeid")
                        .HasColumnType("int");

                    b.Property<int>("NMedico")
                        .HasColumnType("int")
                        .HasColumnName("nMedico");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Utilizadorid")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Medico__3213E83FE9155587");

                    b.HasIndex("Especialidadeid");

                    b.HasIndex("Utilizadorid");

                    b.ToTable("Medico", (string)null);
                });

            modelBuilder.Entity("SNS.Models.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EntidadePatronal")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("entidadePatronal");

                    b.Property<int?>("MedicoDoPacienteId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumeroSns")
                        .HasColumnType("int")
                        .HasColumnName("numeroSNS");

                    b.Property<string>("Profissao")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profissao");

                    b.Property<int>("Utilizadorid")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Paciente__3213E83FC7F14CDD");

                    b.HasIndex("MedicoDoPacienteId");

                    b.HasIndex("Utilizadorid");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("SNS.Models.TipoDeSetor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descri")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descri");

                    b.HasKey("Id")
                        .HasName("PK__TipoDeSe__3213E83F3BE0EEE6");

                    b.ToTable("TipoDeSetor", (string)null);
                });

            modelBuilder.Entity("SNS.Models.TipoDeUtilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descri")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descri");

                    b.HasKey("Id")
                        .HasName("PK__TipoDeUt__3213E83FCD81D941");

                    b.ToTable("TipoDeUtilizador", (string)null);
                });

            modelBuilder.Entity("SNS.Models.Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataApagado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime")
                        .HasColumnName("dataNascimento");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("morada");

                    b.Property<int>("NTelefone")
                        .HasColumnType("int")
                        .HasColumnName("nTelefone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<int>("NumeroCc")
                        .HasColumnType("int")
                        .HasColumnName("numeroCC");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("sexo");

                    b.Property<int>("TipoDeUtilizadorid")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Utilizad__3213E83F4B2A429E");

                    b.HasIndex("TipoDeUtilizadorid");

                    b.ToTable("Utilizador", (string)null);
                });

            modelBuilder.Entity("SNS.Models.BaixaMedica", b =>
                {
                    b.HasOne("SNS.Models.Medico", "Medico")
                        .WithMany("BaixasMedicas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SNS.Models.Paciente", "Paciente")
                        .WithMany("BaixasMedicas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SNS.Models.TipoDeSetor", "tipoDeSetor")
                        .WithMany()
                        .HasForeignKey("tipoDeSetorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("tipoDeSetor");
                });

            modelBuilder.Entity("SNS.Models.HistoricoLaboral", b =>
                {
                    b.HasOne("SNS.Models.Instituição", "Instituição")
                        .WithMany()
                        .HasForeignKey("Instituiçãoid")
                        .IsRequired()
                        .HasConstraintName("FKHistorico_735488");

                    b.HasOne("SNS.Models.Medico", null)
                        .WithMany("HistoricoLaborals")
                        .HasForeignKey("Medicoid")
                        .IsRequired()
                        .HasConstraintName("FKHistorico_875756");

                    b.Navigation("Instituição");
                });

            modelBuilder.Entity("SNS.Models.Instituição", b =>
                {
                    b.HasOne("SNS.Models.TipoDeSetor", "TipoDeSetor")
                        .WithMany("Instituiçãos")
                        .HasForeignKey("TipoDeSetorid")
                        .IsRequired()
                        .HasConstraintName("FKInstituiçã171310");

                    b.Navigation("TipoDeSetor");
                });

            modelBuilder.Entity("SNS.Models.Medico", b =>
                {
                    b.HasOne("SNS.Models.Especialidade", "Especialidade")
                        .WithMany()
                        .HasForeignKey("Especialidadeid")
                        .IsRequired()
                        .HasConstraintName("FKMedico588860");

                    b.HasOne("SNS.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("Utilizadorid")
                        .IsRequired()
                        .HasConstraintName("FKMedico808163");

                    b.Navigation("Especialidade");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("SNS.Models.Paciente", b =>
                {
                    b.HasOne("SNS.Models.Medico", "MedicoDoPaciente")
                        .WithMany()
                        .HasForeignKey("MedicoDoPacienteId");

                    b.HasOne("SNS.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("Utilizadorid")
                        .IsRequired()
                        .HasConstraintName("FKPaciente149628");

                    b.Navigation("MedicoDoPaciente");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("SNS.Models.Utilizador", b =>
                {
                    b.HasOne("SNS.Models.TipoDeUtilizador", "TipoDeUtilizador")
                        .WithMany("Utilizadors")
                        .HasForeignKey("TipoDeUtilizadorid")
                        .IsRequired()
                        .HasConstraintName("FKUtilizador773635");

                    b.Navigation("TipoDeUtilizador");
                });

            modelBuilder.Entity("SNS.Models.Medico", b =>
                {
                    b.Navigation("BaixasMedicas");

                    b.Navigation("HistoricoLaborals");
                });

            modelBuilder.Entity("SNS.Models.Paciente", b =>
                {
                    b.Navigation("BaixasMedicas");
                });

            modelBuilder.Entity("SNS.Models.TipoDeSetor", b =>
                {
                    b.Navigation("Instituiçãos");
                });

            modelBuilder.Entity("SNS.Models.TipoDeUtilizador", b =>
                {
                    b.Navigation("Utilizadors");
                });
#pragma warning restore 612, 618
        }
    }
}
